{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/RemoveBtn.tsx","components/UniversalCheckbox.tsx","state/tasksReducer.ts","state/Task.tsx","state/todolistsReducer.ts","Todolist.tsx","components/ButtonAppBar.tsx","App.tsx","state/store.ts","index.tsx","components/EditableSpan.module.css"],"names":["AddItemForm","React","memo","callBackAddTask","useState","title","setTitle","error","setError","addTask","trim","TextField","id","size","label","variant","value","onChange","e","currentTarget","onKeyPress","key","className","Button","color","onClick","style","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","titleFromProps","changeTask","edit","setEdit","onBlurHandler","useCallback","s","text","autoFocus","onBlur","onDoubleClick","RemoveBtn","callBack","onClickHandler","IconButton","aria-label","Delete","UniversalCheckbox","checked","changeBox","onChangeCallback","Checkbox","initialState","Task","todolistId","taskId","task","useSelector","state","tasks","filter","t","dispatch","useDispatch","changeStatus","isDone","type","payload","ChangeTaskStatus","ChangeTaskTitle","removeTask","RemoveTask","name","v1","ChangeFilter","Todolist","todolist","todolists","tl","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeTodolistCallBack","RemoveTodolist","callBackHandler","AddTask","callBackHandlerForUpdateTitle","ChangeTitle","map","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","mr","Typography","component","App","addTodolist","AddTodolist","Container","fixed","Grid","container","padding","spacing","item","Paper","elevation","rootReducer","combineReducers","action","newState","f","newTask","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6fd51241.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n\tcallBackAddTask: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm:React.FC<PropsType> = React.memo(({callBackAddTask}) => {\r\n\r\n\r\n\tlet [title, setTitle] = useState(\"\")\r\n\tlet [error, setError] = useState<boolean>(false)\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (error) setError(false);\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\taddTask();\r\n\t\t}\r\n\t}\r\n\r\n\tconst addTask = () => {\r\n\t\tif (title.trim() !== \"\") {\r\n\t\t\tcallBackAddTask(title.trim());\r\n\t\t\tsetTitle(\"\");\r\n\t\t} else {\r\n\t\t\tsetError(true);\r\n\t\t}\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<TextField id=\"outlined-basic\"\r\n\t\t\t\t\t   size=\"small\"\r\n\t\t\t\t\t   error={error}\r\n\t\t\t\t\t   label={error ? 'Title is required' : 'Add new'}\r\n\t\t\t\t\t   variant=\"outlined\"\r\n\t\t\t\t\t   value={title}\r\n\t\t\t\t\t   onChange={onChangeHandler}\r\n\t\t\t\t\t   onKeyPress={onKeyPressHandler}\r\n\t\t\t\t\t   className={error ? \"error\" : \"\"}\r\n\t\t\t/>\r\n\r\n\t\t\t<Button variant = \"contained\" color=\"primary\" onClick={addTask} style={{maxWidth: '38px', maxHeight:'38px', minWidth:'38px', minHeight:'38px' }} >+</Button>\r\n\t\t</div>\r\n\t);\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n\ttitleFromProps:string\r\n\tchangeTask:(title:string) => void\r\n}\r\n\r\nconst EditableSpan:React.FC<EditableSpanPropsType> = React.memo(({titleFromProps, changeTask}) => {\r\n\tconst[title, setTitle] = useState(titleFromProps)\r\n\r\n\tconst [edit, setEdit] = useState(false)\r\n\r\n\tconst onDoubleClickHandler =() => {\r\n\t\tsetEdit(true)\r\n\t}\r\n\r\n\tconst onBlurHandler = useCallback(() => {\r\n\t\tsetEdit(false)\r\n\t\tchangeTask(title)\r\n\t},[changeTask, title])\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\tedit ? <input className={s.text} value={title} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler}/>\r\n\t\t\t : <span className={s.text} onDoubleClick={onDoubleClickHandler}>{titleFromProps}</span>\r\n\t);\r\n});\r\n\r\nexport default EditableSpan;\r\n","import React, {useCallback} from 'react';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype RemoveBtnPropsType = {\r\n\tname: string\r\n\tcallBack:() => void\r\n}\r\n\r\nconst RemoveBtn:React.FC<RemoveBtnPropsType> = React.memo(({callBack}) => {\r\n\r\n\tconst onClickHandler = useCallback(() => {\r\n\t\tcallBack()\r\n\t},[callBack])\r\n\r\n\treturn (\r\n\t\t<IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n\t\t\t<Delete />\r\n\t\t</IconButton>\r\n\t);\r\n});\r\n\r\nexport default RemoveBtn;\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\ntype CheckboxesType = {\r\n\tchecked:boolean,\r\n\tchangeBox: (event: boolean) => void\r\n}\r\n\r\nconst UniversalCheckbox:React.FC<CheckboxesType> = React.memo(({checked, changeBox}) => {\r\n\r\n\tconst onChangeCallback = useCallback((e:ChangeEvent<HTMLInputElement>) => {\r\n\t\tchangeBox(e.currentTarget.checked)\r\n\t},[changeBox])\r\n\r\n\treturn (\r\n\t\t\t<Checkbox color=\"primary\" onChange={onChangeCallback} checked={checked}/>\r\n\t);\r\n});\r\n\r\nexport default UniversalCheckbox;\r\n","import {TasksStateType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodolistAcType, removeTodolistACType} from \"./todolistsReducer\";\r\n\r\nexport type removeTaskACType = ReturnType<typeof RemoveTask>\r\nexport type addTaskACACType = ReturnType<typeof AddTask>\r\nexport type changeTaskStatusACType = ReturnType<typeof ChangeTaskStatus>\r\nexport type changeTaskTitleACType = ReturnType<typeof ChangeTaskTitle>\r\n\r\ntype GeneralType = removeTaskACType | addTaskACACType |changeTaskStatusACType | changeTaskTitleACType | addTodolistAcType | removeTodolistACType\r\n\r\nconst initialState:TasksStateType = {\r\n\t/*[todolistID1]: [\r\n\t\t{id: v1(), title: \"HTML&CSS\", isDone: true},\r\n\t\t{id: v1(), title: \"JS\", isDone: true},\r\n\t\t{id: v1(), title: \"ReactJS\", isDone: false},\r\n\t\t{id: v1(), title: \"Rest API\", isDone: false},\r\n\t\t{id: v1(), title: \"GraphQL\", isDone: false},\r\n\t],\r\n\t[todolistID2]: [\r\n\t\t{id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n\t\t{id: v1(), title: \"JS2\", isDone: true},\r\n\t\t{id: v1(), title: \"ReactJS2\", isDone: false},\r\n\t\t{id: v1(), title: \"Rest API2\", isDone: false},\r\n\t\t{id: v1(), title: \"GraphQL2\", isDone: false},\r\n\t]*/\r\n}\r\n\r\nexport const tasksReducer = (state:TasksStateType = initialState, action:GeneralType) : TasksStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"ADD-TODOLIST\": {\r\n\t\t\treturn {...state, [action.payload.todolistId] : [] }\r\n\t\t}\r\n\t\tcase \"REMOVE-TODOLIST\" : {\r\n\t\t\tlet newState = {...state}\r\n\t\t\tdelete newState[action.payload.id]\r\n\t\t\treturn newState\r\n\t\t}\r\n\t\tcase \"REMOVE-TASK\": {\r\n\t\t\treturn {...state, [action.payload.todolistId]: state[action.payload.todolistId].filter(f => f.id !== action.payload.id)}\r\n\t\t}\r\n\t\tcase \"ADD-TASK\": {\r\n\t\t\tlet newTask = { id: v1(), title: action.payload.title, isDone: false }\r\n\t\t\treturn {...state, [action.payload.todolistId] : [newTask, ...state[action.payload.todolistId]]}\r\n\t\t}\r\n\t\tcase \"CHANGE-TASK-STATUS\": {\r\n\t\t\treturn {...state, [action.payload.todolistId] : state[action.payload.todolistId].map(t => t.id === action.payload.id ? {...t, isDone:action.payload.checked} : t)}\r\n\t\t}\r\n\t\tcase \"CHANGE-TASK-TITLE\": {\r\n\t\t\treturn {...state, [action.payload.todolistId] : state[action.payload.todolistId].map(t => t.id === action.payload.id ? {...t, title:action.payload.title} : t)}\r\n\t\t}\r\n\t\tdefault : return state\r\n\r\n\t}\r\n}\r\n\r\nexport const RemoveTask = (todolistId:string, id:string) => ({type: \"REMOVE-TASK\" , payload:{todolistId, id}} as const)\r\nexport const AddTask = (todolistId:string, title:string) => ({type: \"ADD-TASK\" , payload:{todolistId,title}} as const)\r\nexport const ChangeTaskStatus = (todolistId:string, checked:boolean, id:string) => ({type: \"CHANGE-TASK-STATUS\" , payload:{todolistId,checked, id}} as const)\r\nexport const ChangeTaskTitle = (todolistId:string, title:string, id:string) => ({type: \"CHANGE-TASK-TITLE\" , payload:{todolistId,title, id}} as const)\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport UniversalCheckbox from \"../components/UniversalCheckbox\";\r\nimport EditableSpan from \"../components/EditableSpan\";\r\nimport RemoveBtn from \"../components/RemoveBtn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./store\";\r\nimport { TasksType} from \"../App\";\r\nimport {ChangeTaskStatus, ChangeTaskTitle, RemoveTask} from \"./tasksReducer\";\r\n\r\ntype TaskPropsType = {\r\n\ttodolistId:string\r\n\ttaskId:string\r\n}\r\n\r\nconst Task:React.FC<TaskPropsType> = React.memo(({ todolistId, taskId }) => {\r\n\r\n\tconst task = useSelector<AppRootState,TasksType>(state => state.tasks[todolistId].filter(t => t.id === taskId)[0])\r\n\tconst dispatch = useDispatch()\r\n\r\n\r\n\tconst changeStatus = useCallback((isDone: boolean) => {\r\n\t\tdispatch(ChangeTaskStatus(todolistId, isDone, taskId))\r\n\t}, [dispatch, taskId, todolistId])\r\n\r\n\tconst changeTask = useCallback((title:string) => {\r\n\t\tdispatch(ChangeTaskTitle(todolistId, title, taskId))\r\n\t}, [dispatch, taskId, todolistId])\r\n\r\n\tconst removeTask = useCallback(() => {\r\n\t\tdispatch(RemoveTask(todolistId, taskId))\r\n\t}, [dispatch, taskId, todolistId])\r\n\r\n\treturn (\r\n\t\t<li key={taskId} className={task.isDone ? \"is-done\" : \"\"}>\r\n\t\t\t<UniversalCheckbox changeBox={(e) => changeStatus(e)} checked={task.isDone}/>\r\n\t\t\t<EditableSpan titleFromProps = {task.title} changeTask={(title)=>changeTask(title)}/>\r\n\t\t\t<RemoveBtn name={'x'} callBack={() =>removeTask()}/>\r\n\t\t</li>\r\n\t)\r\n});\r\n\r\nexport default Task;\r\n","import {FilterValuesType, TodolistsType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type removeTodolistACType = ReturnType<typeof RemoveTodolist>\r\nexport type addTodolistAcType = ReturnType<typeof AddTodolist>\r\nexport type changeTitleAcType = ReturnType<typeof ChangeTitle>\r\nexport type changeFilterAcType = ReturnType<typeof ChangeFilter>\r\n\r\ntype GeneralTypeForAC = removeTodolistACType | addTodolistAcType | changeTitleAcType | changeFilterAcType\r\n\r\n\r\n\r\nexport let todolistID1 = v1();\r\nexport let todolistID2 = v1();\r\n\r\nconst initialState:Array<TodolistsType> = [\r\n\t// {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n\t// {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n]\r\n\r\nexport const todolistsReducer = (state:Array<TodolistsType> = initialState, action:GeneralTypeForAC) : Array<TodolistsType> => {\r\n\tswitch (action.type) {\r\n\t\tcase \"REMOVE-TODOLIST\": {\r\n\t\t\tlet newState = [...state]\r\n\t\t\treturn newState.filter(tl => tl.id !== action.payload.id)\r\n\t\t}\r\n\t\tcase \"ADD-TODOLIST\": {\r\n\t\t\treturn [\r\n\t\t\t\t...state,\r\n\t\t\t\t{id: action.payload.todolistId, title: action.payload.title, filter: 'all'}\r\n\t\t\t]\r\n\t\t}\r\n\t\tcase \"CHANGE-TODOLIST-TITLE\": {\r\n\t\t\tlet newState = [...state]\r\n\t\t\treturn newState.map(tl => tl.id === action.payload.id ? {...tl, title:action.payload.title} : tl)\r\n\t\t}\r\n\t\tcase \"CHANGE-TODOLIST-FILTER\": {\r\n\t\t\tlet newState = [...state]\r\n\t\t\treturn newState.map(t => t.id === action.payload.id ? {...t, filter: action.payload.filter} : t)\r\n\t\t}\r\n\t\tdefault : return state\r\n\t}\r\n}\r\n\r\nexport const RemoveTodolist = (id:string) => ({type: \"REMOVE-TODOLIST\", payload: {id}} as const)\r\nexport const AddTodolist = (title:string) => ({type: \"ADD-TODOLIST\", payload:{title, todolistId:v1()}} as const)\r\nexport const ChangeTitle = (id:string, title:string) => ({type: \"CHANGE-TODOLIST-TITLE\", payload:{id, title}} as const)\r\nexport const ChangeFilter = (id:string, filter:FilterValuesType) => ({type: \"CHANGE-TODOLIST-FILTER\", payload:{id, filter}} as const)\r\n","import React, {useCallback} from 'react';\r\nimport {TasksType, TodolistsType} from './App';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\nimport RemoveBtn from \"./components/RemoveBtn\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Task from \"./state/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\nimport {ChangeFilter, ChangeTitle, RemoveTodolist} from \"./state/todolistsReducer\";\r\nimport {AddTask} from \"./state/tasksReducer\";\r\n\r\ntype TodolistPropsType = {\r\n\tid:string\r\n}\r\n\r\nexport const Todolist:React.FC<TodolistPropsType> = React.memo(({id}) => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tlet todolist = useSelector<AppRootState,TodolistsType>(state => state.todolists.filter(tl => tl.id === id)[0])\r\n\tlet tasks = useSelector<AppRootState, Array<TasksType>>(state => state.tasks[id])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch((ChangeFilter(todolist.id, \"all\"))),\r\n\t\t[dispatch, todolist.id]);\r\n    const onActiveClickHandler = useCallback(() => dispatch((ChangeFilter(todolist.id, \"active\"))),\r\n\t\t[dispatch, todolist.id]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch((ChangeFilter(todolist.id, \"completed\"))),\r\n\t\t[dispatch, todolist.id]);\r\n\r\n\r\n\tif (todolist.filter === \"active\") {\r\n\t\ttasks = tasks.filter(t => !t.isDone);\r\n\t}\r\n\tif (todolist.filter === \"completed\") {\r\n\t\ttasks = tasks.filter(t => t.isDone);\r\n\t}\r\n\r\n\tconst removeTodolistCallBack = useCallback(() => {\r\n\t\tdispatch(RemoveTodolist(todolist.id))\r\n\t},[dispatch, todolist.id])\r\n\r\n\tconst callBackHandler = useCallback((title:string) => {\r\n\t\tdispatch(AddTask(todolist.id, title))\r\n\t},[dispatch, todolist.id])\r\n\r\n\tconst callBackHandlerForUpdateTitle = useCallback((title:string) => {\r\n\t\tdispatch(ChangeTitle(todolist.id, title))\r\n\t},[dispatch, todolist.id])\r\n\r\n    return <div>\r\n        <h3>\r\n\t\t\t<EditableSpan titleFromProps = {todolist.title} changeTask={callBackHandlerForUpdateTitle}/>\r\n\t\t\t<RemoveBtn name={'x'} callBack={removeTodolistCallBack}/>\r\n\t\t</h3>\r\n\t\t<AddItemForm callBackAddTask={callBackHandler}/>\r\n        <ul>\r\n            {\r\n\t\t\t\ttasks.map(t => {\r\n\t\t\t\t\treturn <Task key={t.id} taskId={t.id} todolistId={todolist.id} />\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n\t\t\t<Button variant={todolist.filter === 'all' ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor=\"success\" onClick={onAllClickHandler} >All</Button>\r\n\t\t\t<Button variant={todolist.filter === 'active' ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor=\"primary\" onClick={onActiveClickHandler}>Active</Button>\r\n\t\t\t<Button variant={todolist.filter === 'completed' ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor=\"secondary\" onClick={onCompletedClickHandler}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\n\r\nexport default function ButtonAppBar() {\r\n\treturn (\r\n\t\t<Box sx={{ flexGrow: 1 }}>\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tsize=\"large\"\r\n\t\t\t\t\t\tedge=\"start\"\r\n\t\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\t\taria-label=\"menu\"\r\n\t\t\t\t\t\tsx={{ mr: 2 }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n\t\t\t\t\t\tNews\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Button color=\"inherit\">Login</Button>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</Box>\r\n\t);\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./components/AddItemForm\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport {AddTodolist} from \"./state/todolistsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./state/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TasksType = {\r\n\tid:string,\r\n\ttitle:string,\r\n\tisDone:boolean\r\n}\r\n\r\nexport type TodolistsType = {\r\n\tid:string\r\n\ttitle:string\r\n\tfilter:FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n\t[key: string ]:TasksType[]\r\n}\r\n\r\nconst App = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst todolists = useSelector<AppRootState,TodolistsType[]>(state => state.todolists)\r\n\r\n\tconst addTodolist = useCallback((title:string) => {\r\n\t\tdispatch(AddTodolist(title))\r\n\t}, [dispatch])\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<ButtonAppBar/>\r\n\t\t\t<Container fixed >\r\n\t\t\t\t<Grid container  style={{padding: \"20px\"}}>\r\n\t\t\t\t\t<AddItemForm callBackAddTask={addTodolist} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t{todolists.map(tl => {\r\n\t\t\t\t\t\treturn <Grid item>\r\n\t\t\t\t\t\t\t<Paper elevation={4} style={{padding: \"10px\"}}>\r\n\t\t\t\t\t\t\t<Todolist\r\n\t\t\t\t\t\t\t\tkey={tl.id}\r\n\t\t\t\t\t\t\t\tid={tl.id}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t})}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolistsReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolists:todolistsReducer,\r\n\ttasks:tasksReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nexport const store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store'\r\n\r\n// @ts-ignore\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"EditableSpan_text__1kI4x\"};"],"sourceRoot":""}