{"version":3,"sources":["components/editableSpan/EditableSpan.module.css","api/TodolistsApi.tsx","app/appReducer.ts","utils/error-utils.ts","features/Todolists/todolistsReducer.ts","features/Tasks/tasksReducer.ts","features/Login/authReducer.ts","app/store.ts","components/buttonAppBar/ButtonAppBar.tsx","components/addItemBtn/AddItemBtn.tsx","components/editableSpan/EditableSpan.tsx","components/removeItemBtn/RemoveItemBtn.tsx","components/universalCheckbox/UniversalCheckbox.tsx","features/Tasks/Task.tsx","features/Todolists/Todolist.tsx","features/Todolists/TodolistsList.tsx","features/Login/Login.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["module","exports","ResultCode","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","data","post","delete","todolistsAPI","title","todolistId","put","tasksAPI","taskId","model","initialState","status","error","setAppStatus","type","payload","setAppError","handleNetworkError","dispatch","message","handleAppError","messages","length","changeTodolistFilter","id","filter","isLoggedIn","isInitialized","login","rootReducer","combineReducers","todolists","state","action","tl","addedDate","order","entityStatus","map","t","tasks","newState","f","task","todoListId","stateCopy","forEach","app","auth","useAppSelector","useSelector","store","createStore","applyMiddleware","thunk","ButtonAppBar","useDispatch","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","aria-label","mr","Typography","variant","component","Button","onClick","then","res","resultCode","success","console","log","catch","err","window","AddItemBtn","React","memo","callBackAddTask","useState","setTitle","setError","addTask","trim","TextField","label","value","onChange","e","currentTarget","onKeyPress","key","className","disabled","style","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","titleFromProps","changeTask","edit","setEdit","onBlurHandler","useCallback","s","text","autoFocus","onBlur","onDoubleClick","RemoveItemBtn","callBack","onClickHandler","Delete","UniversalCheckbox","checked","changeBox","onChangeCallback","Completed","New","Checkbox","Task","changeStatus","getState","find","elem","startDate","priority","description","deadline","changeTaskStatus","updateTaskStatusTC","changeTaskTitle","updateTaskTitleTC","removeTask","deleteTaskTC","name","Todolist","todolist","useEffect","setTasks","items","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","removeTodolistCallBack","removeTodolist","callBackHandler","item","createTaskTC","callBackHandlerForUpdateTitle","changeTodolistTitle","updateTodolistTitleTC","TodolistsList","addTodolist","createTodolistTC","Grid","container","padding","spacing","Paper","elevation","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","Alert","forwardRef","props","ref","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","width","App","finally","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e25ea933.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"EditableSpan_text__1gsyY\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n\twithCredentials: true,\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n\theaders: {\r\n\t\t\"API-KEY\": \"e53bd4e2-48e0-477a-b70a-83002085f133\"\r\n\t}\r\n})\r\n\r\nexport type TodolistType = {\r\n\tid: string\r\n\ttitle: string\r\n\taddedDate: string\r\n\torder: number\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n\tresultCode: number\r\n\tmessages: Array<string>\r\n\tdata: T\r\n}\r\n\r\nexport enum ResultCode  {\r\n\tsuccess = 0,\r\n\terror = 1\r\n}\r\n\r\nexport enum TaskStatuses  {\r\n\tNew = 0,\r\n\tInProgress = 1,\r\n\tCompleted = 2,\r\n\tDraft = 3\r\n}\r\n\r\nexport enum TaskPriorities  {\r\n\tLow = 0,\r\n\tMiddle = 1,\r\n\tHi = 2,\r\n\tUrgently = 3,\r\n\tLater = 4\r\n}\r\n\r\nexport  type TaskType = {\r\n\tdescription: string,\r\n\ttitle: string,\r\n\t/*completed: boolean,*/\r\n\tstatus: TaskStatuses,\r\n\tpriority: TaskPriorities,\r\n\tstartDate: string,\r\n\tdeadline: string,\r\n\tid: string,\r\n\ttodoListId: string,\r\n\torder: number,\r\n\taddedDate: string\r\n}\r\n\r\nexport type GetTasksResponseType = {\r\n\terror: string | null\r\n\ttotalCount : number\r\n\titems: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n\ttitle: string,\r\n\tdescription: string,\r\n\t//completed: boolean,\r\n\tstatus:TaskStatuses,\r\n\tpriority: TaskPriorities,\r\n\tstartDate: string,\r\n\tdeadline: string,\r\n}\r\n\r\nexport type LoginParamsType = {\r\n\temail: string,\r\n\tpassword: string,\r\n\trememberMe?: boolean,\r\n\tcaptcha?: string\r\n}\r\n\r\nexport type MeResponseType = {\r\n\tid: number,\r\n\temail: string,\r\n\tlogin:string,\r\n}\r\n\r\nexport const authAPI = {\r\n\tme() {\r\n\t\treturn instance.get<ResponseType<MeResponseType>>(`/auth/me`)\r\n\t},\r\n\tlogin(data : LoginParamsType) {\r\n\t\treturn instance.post<ResponseType<{userId: number}>>(`/auth/login`, data)\r\n\t},\r\n\tlogout() {\r\n\t\treturn instance.delete<ResponseType>(`/auth/login`)\r\n\t},\r\n}\r\n\r\nexport const todolistsAPI = {\r\n\r\n\tgetTodolists() {\r\n\t\treturn instance.get<TodolistType[]>(`/todo-lists`)\r\n\t},\r\n\r\n\tcreateTodolist(title: string) {\r\n\t\treturn instance.post<ResponseType<{item : TodolistType}>>(`/todo-lists`, {title})\r\n\t},\r\n\r\n\tdeleteTodolist(todolistId: string) {\r\n\t\treturn instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\r\n\t},\r\n\r\n\tupdateTodolistTitle(todolistId: string, title: string) {\r\n\t\treturn instance.put<ResponseType>(`/todo-lists/${todolistId}`, {title})\r\n\t},\r\n\r\n\treorderTodolists(todolistId: string, putAfterItemId: string) {\r\n\t\treturn instance.put(`/todo-lists/${todolistId}/reorder`, {putAfterItemId})\r\n\t},\r\n\r\n}\r\n\r\nexport const tasksAPI = {\r\n\r\n\tgetTasks(todolistId: string) {\r\n\t\treturn instance.get<GetTasksResponseType>(`/todo-lists/${todolistId}/tasks`)\r\n\t},\r\n\r\n\tpostTasks(todolistId: string, title: string) {\r\n\t\treturn instance.post<ResponseType<{item : TaskType}>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n\t},\r\n\r\n\tupdateTasks(todolistId: string, taskId: string, model: UpdateTaskModelType ) {\r\n\t\treturn instance.put<ResponseType<{item : TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n\t},\r\n\r\n\tdeleteTask(todolistId: string, taskId: string) {\r\n\t\treturn instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n\t},\r\n\r\n\treorderTasks(todolistId: string, taskId: string, putAfterItemId: string) {\r\n\t\treturn instance.put<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}/reorder`, {putAfterItemId})\r\n\t},\r\n\r\n}\r\n","//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatus>\r\nexport type setAppErrorACType = ReturnType<typeof setAppError>\r\n\r\nexport type AppActionsType = setAppStatusACType | setAppErrorACType\r\n\r\n// initial state\r\nconst initialState = {\r\n\tstatus: 'loading' as RequestStatusType,\r\n\terror: null as null | string\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'APP/SET-STATUS':\r\n\t\t\treturn {...state, status: action.payload.status}\r\n\t\tcase \"APP/SET-ERROR\": {\r\n\t\t\treturn {...state, error: action.payload.error}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n//AC\r\n\r\nexport const setAppStatus = (status:RequestStatusType ) => ({type: 'APP/SET-STATUS', payload: {status}} as const)\r\nexport const setAppError = (error: null | string ) => ({type: 'APP/SET-ERROR', payload: {error}} as const)\r\n\r\n//TC\r\n","import {setAppError, setAppStatus} from \"../app/appReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AllAppActionsType} from \"../app/store\";\r\nimport {ResponseType} from \"../api/TodolistsApi\";\r\n\r\nexport const handleNetworkError = (dispatch: Dispatch<AllAppActionsType>, message: string) => {\r\n\tdispatch(setAppError(message))\r\n\tdispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleAppError = <T>(dispatch: Dispatch<AllAppActionsType>, data: ResponseType<T> ) => {\r\n\tif(data.messages.length) {\r\n\t\tdispatch(setAppError(data.messages[0]))\r\n\t} else {\r\n\t\tdispatch(setAppError('Some error occurred'))\r\n\t}\r\n\tdispatch(setAppStatus('failed'))\r\n\r\n}","import {ResultCode, todolistsAPI, TodolistType} from \"../../api/TodolistsApi\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {RequestStatusType, setAppStatus} from \"../../app/appReducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleAppError, handleNetworkError} from \"../../utils/error-utils\";\r\n\r\n//types\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolist>\r\nexport type AddTodolistACType = ReturnType<typeof addTodolist>\r\nexport type ChangeTitleACType = ReturnType<typeof changeTodolistTitle>\r\nexport type ChangeFilterACType = ReturnType<typeof changeTodolistFilter>\r\nexport type SetTodolistACType = ReturnType<typeof setTodolist>\r\nexport type ChangeEntityStatusType = ReturnType<typeof changeTodolistEntityStatus>\r\n\r\nexport type TodolistsActionsType = RemoveTodolistACType | AddTodolistACType | ChangeTitleACType | ChangeFilterACType | SetTodolistACType | ChangeEntityStatusType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n\tfilter: FilterValuesType,\r\n\tentityStatus: RequestStatusType\r\n}\r\n\r\n// initial state\r\nconst initialState:Array<TodolistDomainType> = [\r\n\t// {id: todolistID1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n\t// {id: todolistID2, title: 'What to buy', filter: 'all', , addedDate: '', order: 0},\r\n]\r\n\r\n//reducer\r\nexport const todolistsReducer = (state:Array<TodolistDomainType> = initialState, action:TodolistsActionsType) : Array<TodolistDomainType> => {\r\n\tswitch (action.type) {\r\n\t\tcase \"REMOVE-TODOLIST\": {\r\n\t\t\treturn state.filter(tl => tl.id !== action.payload.id)\r\n\t\t}\r\n\t\tcase \"ADD-TODOLIST\": {\r\n\t\t\treturn [\r\n\t\t\t\t{id: action.payload.todolistId, title: action.payload.title, filter: 'all', addedDate: '', order: 0, entityStatus: \"idle\" },\r\n\t\t\t\t...state\r\n\t\t\t]\r\n\t\t}\r\n\t\tcase \"CHANGE-TODOLIST-TITLE\": {\r\n\t\t\treturn state.map(tl => tl.id === action.payload.id ? {...tl, title:action.payload.title} : tl)\r\n\t\t}\r\n\t\tcase \"CHANGE-TODOLIST-FILTER\": {\r\n\t\t\treturn state.map(t => t.id === action.payload.id ? {...t, filter: action.payload.filter} : t)\r\n\t\t}\r\n\t\tcase \"SET-TODOLIST\":{\r\n\t\t\treturn action.payload.todolists.map(tl => ({...tl, filter: \"all\" as FilterValuesType, entityStatus: \"idle\"}))\r\n\t\t}\r\n\t\tcase \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n\t\t\treturn state.map(tl => tl.id === action.payload.id ? ({...tl, entityStatus: action.payload.status}) : tl)\r\n\t\t}\r\n\t\tdefault : return state\r\n\t}\r\n}\r\n\r\n//AC\r\nexport const removeTodolist = (id:string) => ({type: \"REMOVE-TODOLIST\", payload: {id}} as const)\r\nexport const addTodolist = (title:string, todolistId: string) => ({type: \"ADD-TODOLIST\", payload:{title, todolistId}} as const)\r\nexport const changeTodolistTitle = (id:string, title:string) => ({type: \"CHANGE-TODOLIST-TITLE\", payload:{id, title}} as const)\r\nexport const changeTodolistFilter = (id:string, filter:FilterValuesType) => ({type: \"CHANGE-TODOLIST-FILTER\", payload:{id, filter}} as const)\r\nexport const setTodolist = (todolists: TodolistType[]) => ({type: \"SET-TODOLIST\", payload:{todolists}} as const)\r\nexport const changeTodolistEntityStatus  = (id: string, status: RequestStatusType) => ({type: \"CHANGE-TODOLIST-ENTITY-STATUS\", payload:{id, status}} as const)\r\n\r\n//TC\r\nexport const setTodolistsTC = (): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\t\ttodolistsAPI.getTodolists()\r\n\t\t\t.then(res => {\r\n\t\t\t\tconsole.log('get todo', res)\r\n\t\t\t\tdispatch(setTodolist(res.data))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t})\r\n\t\t\t.catch((err: AxiosError) => {\r\n\t\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\nexport const createTodolistTC = (title: string): AppThunk  => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\t\ttodolistsAPI.createTodolist(title)\r\n\t\t\t.then(res => {\r\n\t\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\t\tconsole.log('post todo', res)\r\n\t\t\t\t\tdispatch(addTodolist(title, res.data.data.item.id))\r\n\t\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t\t} else {\r\n\t\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.catch((err: AxiosError) => {\r\n\t\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t\t})\r\n\t\t}\r\n\r\nexport const deleteTodolistTC = (todolistId: string): AppThunk  => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\tdispatch(changeTodolistEntityStatus(todolistId, 'loading'))\r\n\ttodolistsAPI.deleteTodolist(todolistId)\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('delete todo', res)\r\n\t\t\t\tdispatch(removeTodolist(todolistId))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string): AppThunk  => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\ttodolistsAPI.updateTodolistTitle(todolistId, title)\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('update todo', res)\r\n\t\t\t\tdispatch(changeTodolistTitle(todolistId, title))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n}\r\n","import {AddTodolistACType, RemoveTodolistACType, SetTodolistACType} from \"../Todolists/todolistsReducer\";\r\nimport {ResultCode, tasksAPI, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../api/TodolistsApi\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {TasksStateType} from \"../Todolists/TodolistsList\";\r\nimport {setAppStatus} from \"../../app/appReducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleAppError, handleNetworkError} from \"../../utils/error-utils\";\r\n\r\n//types\r\nexport type removeTaskACType = ReturnType<typeof removeTask>\r\nexport type addTaskACACType = ReturnType<typeof addTask>\r\nexport type changeTaskStatusACType = ReturnType<typeof changeTaskStatus>\r\nexport type changeTaskTitleACType = ReturnType<typeof changeTaskTitle>\r\nexport type setTasksACType = ReturnType<typeof setTasks>\r\n\r\nexport type TaskActionsType = removeTaskACType | addTaskACACType |changeTaskStatusACType | changeTaskTitleACType\r\n\t| AddTodolistACType | RemoveTodolistACType | SetTodolistACType | setTasksACType\r\n\r\n// initial state\r\nconst initialState:TasksStateType = {\r\n\t/*[todolistID1]: [\r\n\t\t{id: v1(), title: \"HTML&CSS\", status: true},\r\n\t\t{id: v1(), title: \"JS\", status: true},\r\n\t\t{id: v1(), title: \"ReactJS\", status: false},\r\n\t\t{id: v1(), title: \"Rest API\", status: false},\r\n\t\t{id: v1(), title: \"GraphQL\", status: false},\r\n\t],\r\n\t[todolistID2]: [\r\n\t\t{id: v1(), title: \"HTML&CSS2\", status: true},\r\n\t\t{id: v1(), title: \"JS2\", status: true},\r\n\t\t{id: v1(), title: \"ReactJS2\", status: false},\r\n\t\t{id: v1(), title: \"Rest API2\", status: false},\r\n\t\t{id: v1(), title: \"GraphQL2\", status: false},\r\n\t]*/\r\n}\r\n\r\n//reducer\r\nexport const tasksReducer = (state: TasksStateType = initialState, action:TaskActionsType) : TasksStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"ADD-TODOLIST\": {\r\n\t\t\treturn {...state, [action.payload.todolistId] : [] }\r\n\t\t}\r\n\t\tcase \"REMOVE-TODOLIST\": {\r\n\t\t\tlet newState = {...state}\r\n\t\t\tdelete newState[action.payload.id]\r\n\t\t\treturn newState\r\n\t\t}\r\n\t\tcase \"REMOVE-TASK\": {\r\n\t\t\treturn {...state, [action.payload.todolistId]: state[action.payload.todolistId].filter(f => f.id !== action.payload.id)}\r\n\t\t}\r\n\t\tcase \"ADD-TASK\": {\r\n\t\t\treturn {...state, [action.payload.task.todoListId] : [action.payload.task, ...state[action.payload.task.todoListId]]}\r\n\t\t}\r\n\t\tcase \"CHANGE-TASK-STATUS\": {\r\n\t\t\treturn {...state, [action.payload.todolistId] : state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {...t, status:action.payload.status} : t)}\r\n\t\t}\r\n\t\tcase \"CHANGE-TASK-TITLE\": {\r\n\t\t\treturn {...state, [action.payload.todolistId] : state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {...t, title:action.payload.title} : t)}\r\n\t\t}\r\n\t\tcase \"SET-TODOLIST\": {\r\n\t\t\tlet stateCopy = {...state}\r\n\t\t\taction.payload.todolists.forEach((tl) => {\r\n\t\t\t\tstateCopy[tl.id] = []\r\n\t\t\t})\r\n\t\t\treturn stateCopy\r\n\t\t}\r\n\t\tcase \"SET-TASKS\": {\r\n\t\t\treturn {...state, [action.payload.todolistId]: action.payload.tasks}\r\n\r\n\t\t}\r\n\t\tdefault : return state\r\n\r\n\t}\r\n}\r\n\r\n//AC\r\nexport const removeTask = (todolistId:string, id:string) => ({type: \"REMOVE-TASK\" , payload:{todolistId, id}} as const)\r\nexport const addTask = (task: TaskType) => ({type: \"ADD-TASK\" , payload:{task}} as const)\r\nexport const changeTaskStatus = (todolistId:string, status:TaskStatuses, taskId:string) => ({type: \"CHANGE-TASK-STATUS\" , payload:{todolistId,status, taskId}} as const)\r\nexport const changeTaskTitle = (todolistId:string, taskId:string, title:string ) => ({type: \"CHANGE-TASK-TITLE\" , payload:{todolistId,title, taskId}} as const)\r\nexport const setTasks = (todolistId:string, tasks: TaskType[]) => ({type:\"SET-TASKS\", payload: {todolistId, tasks}} as const)\r\n\r\n//TC\r\nexport const fetchTasksTC = (todolistId:string): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\ttasksAPI.getTasks(todolistId)\r\n\t\t.then(res => {\r\n\t\t\tconsole.log('get task', res)\r\n\t\t\tdispatch(setTasks(todolistId, res.data.items))\r\n\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n\t}\r\n\r\n\r\nexport const createTaskTC = (todolistId:string, title: string): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\ttasksAPI.postTasks(todolistId, title)\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('post task', res)\r\n\t\t\t\tlet task = res.data.data.item\r\n\t\t\t\tdispatch(addTask(task))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n\t}\r\n\r\n\r\nexport const deleteTaskTC = (todolistId:string, taskId: string): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\ttasksAPI.deleteTask(todolistId, taskId)\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('delete task', res)\r\n\t\t\t\tdispatch(removeTask(todolistId, taskId))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n\t}\r\n\r\n\r\nexport const updateTaskStatusTC = (todolistId:string, taskId: string, status:TaskStatuses): AppThunk => (dispatch, getState) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\t\tconst state = getState()\r\n\r\n\t\tconst task = state.tasks[todolistId].find((elem)=> elem.id === taskId)\r\n\t\tif (task) {\r\n\t\t\tconst model:UpdateTaskModelType = {\r\n\t\t\t\ttitle: task.title,\r\n\t\t\t\tstartDate: task.startDate,\r\n\t\t\t\tpriority: task.priority,\r\n\t\t\t\tdescription: task.description,\r\n\t\t\t\tdeadline: task.deadline,\r\n\t\t\t\tstatus: status,\r\n\t\t\t}\r\n\r\n\t\t\ttasksAPI.updateTasks(todolistId, taskId, model)\r\n\t\t\t\t.then(res => {\r\n\t\t\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\t\t\tconsole.log('update task', res)\r\n\t\t\t\t\t\tdispatch(changeTaskStatus(todolistId, status, taskId))\r\n\t\t\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err: AxiosError) => {\r\n\t\t\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t\t\t})\r\n\t\t}\r\n}\r\n\r\n\r\nexport const updateTaskTitleTC = (todolistId:string, taskId: string, title:string): AppThunk => (dispatch, getState) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\tconst state = getState()\r\n\r\n\tconst task = state.tasks[todolistId].find((elem)=> elem.id === taskId)\r\n\tif (task) {\r\n\t\tconst model:UpdateTaskModelType = {\r\n\t\t\ttitle: title,\r\n\t\t\tstartDate: task.startDate,\r\n\t\t\tpriority: task.priority,\r\n\t\t\tdescription: task.description,\r\n\t\t\tdeadline: task.deadline,\r\n\t\t\tstatus: task.status\r\n\t\t}\r\n\r\n\t\ttasksAPI.updateTasks(todolistId, taskId, model)\r\n\t\t\t.then(res => {\r\n\t\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\t\tconsole.log('update task', res)\r\n\t\t\t\t\tdispatch(changeTaskTitle(todolistId, taskId, title))\r\n\t\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t\t} else {\r\n\t\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.catch((err: AxiosError) => {\r\n\t\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\n\r\n","import {setAppStatus} from \"../../app/appReducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {authAPI, LoginParamsType, ResultCode} from \"../../api/TodolistsApi\";\r\nimport {handleAppError, handleNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n// types\r\ntype LoginACType = ReturnType<typeof login>\r\ntype setAppIsInitializedACType = ReturnType<typeof setAppIsInitialized>\r\nexport type AuthActionsType = LoginACType | setAppIsInitializedACType\r\ntype InitialStateType = typeof initialState\r\n\r\n//initial State\r\nconst initialState = {\r\n\tisLoggedIn: false,\r\n\tisInitialized: false\r\n}\r\n\r\n//reducer\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'login/SET-IS-LOGGED-IN':\r\n\t\t\treturn {...state, isLoggedIn: action.payload.isLoggedIn}\r\n\t\tcase \"login/SET-IS-INITIALIZED\":\r\n\t\t\treturn {...state, isInitialized: action.payload.isInitialized}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n// AC\r\nexport const login = (isLoggedIn: boolean) => ({type: 'login/SET-IS-LOGGED-IN', payload: {isLoggedIn}} as const)\r\nexport const setAppIsInitialized = (isInitialized: boolean) => ({type: 'login/SET-IS-INITIALIZED', payload: {isInitialized}} as const)\r\n\r\n// TC\r\n\r\nexport const initializeApp = (): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\tauthAPI.me()\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('auth me data', res)\r\n\t\t\t\tdispatch(login(true))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n\t\t.finally(() => {\r\n\t\t\tdispatch(setAppIsInitialized(true))\r\n\t\t})\r\n}\r\n\r\nexport const loginTC = (data: LoginParamsType): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\tauthAPI.login(data)\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('login data', res)\r\n\t\t\t\tdispatch(login(true))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n}\r\n\r\nexport const logout = (): AppThunk => (dispatch) => {\r\n\tdispatch(setAppStatus('loading'))\r\n\tauthAPI.logout()\r\n\t\t.then(res => {\r\n\t\t\tif(res.data.resultCode === ResultCode.success) {\r\n\t\t\t\tconsole.log('logout data', res)\r\n\t\t\t\tdispatch(login(false))\r\n\t\t\t\tdispatch(setAppStatus('succeeded'))\r\n\t\t\t} else {\r\n\t\t\t\thandleAppError(dispatch, res.data)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch((err: AxiosError) => {\r\n\t\t\thandleNetworkError(dispatch, err.message)\r\n\t\t})\r\n}\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers} from \"redux\";\r\nimport {TodolistsActionsType, todolistsReducer} from \"../features/Todolists/todolistsReducer\"\r\nimport {TaskActionsType, tasksReducer} from \"../features/Tasks/tasksReducer\"\r\nimport { legacy_createStore as createStore} from 'redux'\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from \"./appReducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AuthActionsType, authReducer} from \"../features/Login/authReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodolists:todolistsReducer,\r\n\ttasks:tasksReducer,\r\n\tapp: appReducer,\r\n\tauth : authReducer\r\n})\r\n//state typification\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n//all reducers types\r\nexport type AllAppActionsType = TaskActionsType | TodolistsActionsType | AppActionsType | AuthActionsType\r\n//TC typification\r\nexport type AppThunk<ReturnType = void> = ThunkAction<void, AppRootStateType, unknown, AllAppActionsType>\r\n//useSelector for every typification\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk)/*, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {logout} from \"../../features/Login/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport default function ButtonAppBar() {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n\tconst logOutHandler = () =>  {\r\n\t\tdispatch(logout())\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Box sx={{ flexGrow: 1 }}>\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tsize=\"large\"\r\n\t\t\t\t\t\tedge=\"start\"\r\n\t\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\t\taria-label=\"menu\"\r\n\t\t\t\t\t\tsx={{ mr: 2 }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<MenuIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n\t\t\t\t\t\tTodoLists\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t{isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Logout</Button>}\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t</Box>\r\n\t);\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../app/appReducer\";\r\n\r\ntype PropsType = {\r\n\tcallBackAddTask: (title: string) => void,\r\n\tentityStatus? : RequestStatusType\r\n}\r\n\r\nexport const AddItemBtn:React.FC<PropsType> = React.memo(({callBackAddTask, entityStatus}) => {\r\n\r\n\r\n\tlet [title, setTitle] = useState(\"\")\r\n\tlet [error, setError] = useState<boolean>(false)\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (error) setError(false);\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\taddTask();\r\n\t\t}\r\n\t}\r\n\r\n\tconst addTask = () => {\r\n\t\tif (title.trim() !== \"\") {\r\n\t\t\tcallBackAddTask(title.trim());\r\n\t\t\tsetTitle(\"\");\r\n\t\t} else {\r\n\t\t\tsetError(true);\r\n\t\t}\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<TextField id=\"outlined-basic\"\r\n\t\t\t\t\t   size=\"small\"\r\n\t\t\t\t\t   error={error}\r\n\t\t\t\t\t   label={error ? 'Title is required' : 'Add new'}\r\n\t\t\t\t\t   variant=\"outlined\"\r\n\t\t\t\t\t   value={title}\r\n\t\t\t\t\t   onChange={onChangeHandler}\r\n\t\t\t\t\t   onKeyPress={onKeyPressHandler}\r\n\t\t\t\t\t   className={error ? \"error\" : \"\"}\r\n\t\t\t\t\t   disabled={entityStatus === 'loading'}\r\n\t\t\t/>\r\n\r\n\t\t\t<Button variant = \"contained\" color=\"primary\" onClick={addTask} disabled={entityStatus === 'loading'} style={{maxWidth: '38px', maxHeight:'38px', minWidth:'38px', minHeight:'38px' }} >+</Button>\r\n\t\t</div>\r\n\t);\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport s from './EditableSpan.module.css'\r\n\r\ntype EditableSpanPropsType = {\r\n\ttitleFromProps:string\r\n\tchangeTask:(title:string) => void,\r\n\r\n}\r\n\r\nconst EditableSpan:React.FC<EditableSpanPropsType> = React.memo(({titleFromProps, changeTask}) => {\r\n\tconst[title, setTitle] = useState(titleFromProps)\r\n\r\n\tconst [edit, setEdit] = useState(false)\r\n\r\n\tconst onDoubleClickHandler = () => {\r\n\t\tsetEdit(true)\r\n\t}\r\n\r\n\tconst onBlurHandler = useCallback(() => {\r\n\t\tsetEdit(false)\r\n\t\tchangeTask(title)\r\n\t},[changeTask, title])\r\n\r\n\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTitle(e.currentTarget.value)\r\n\t}\r\n\r\n\treturn (\r\n\t\tedit ? <input className={s.text} value={title} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler}/>\r\n\t\t\t : <span className={s.text} onDoubleClick={onDoubleClickHandler}>{titleFromProps}</span>\r\n\t);\r\n});\r\n\r\nexport default EditableSpan;\r\n","import React, {useCallback} from 'react';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../app/appReducer\";\r\n\r\ntype RemoveBtnPropsType = {\r\n\tname: string\r\n\tcallBack:() => void,\r\n\tentityStatus? : RequestStatusType\r\n}\r\n\r\nconst RemoveItemBtn:React.FC<RemoveBtnPropsType> = React.memo(({callBack, entityStatus }) => {\r\n\r\n\tconst onClickHandler = useCallback(() => {\r\n\t\tcallBack()\r\n\t},[callBack])\r\n\r\n\treturn (\r\n\t\t<IconButton aria-label=\"delete\" onClick={onClickHandler} disabled={entityStatus === 'loading'}>\r\n\t\t\t<Delete />\r\n\t\t</IconButton>\r\n\t);\r\n});\r\n\r\nexport default RemoveItemBtn;\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport {TaskStatuses} from \"../../api/TodolistsApi\";\r\n\r\ntype CheckboxesType = {\r\n\tchecked:TaskStatuses,\r\n\tchangeBox: (event: TaskStatuses) => void\r\n}\r\n\r\nconst UniversalCheckbox:React.FC<CheckboxesType> = React.memo(({checked, changeBox}) => {\r\n\r\n\tconst onChangeCallback = useCallback((e:ChangeEvent<HTMLInputElement>) => {\r\n\t\tchangeBox(e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n\t},[changeBox])\r\n\r\n\treturn (\r\n\t\t\t<Checkbox color=\"primary\" onChange={onChangeCallback} checked={checked === TaskStatuses.Completed}/>\r\n\t);\r\n});\r\n\r\nexport default UniversalCheckbox;\r\n","import React, {useCallback} from 'react';\r\nimport UniversalCheckbox from \"../../components/universalCheckbox/UniversalCheckbox\";\r\nimport EditableSpan from \"../../components/editableSpan/EditableSpan\";\r\nimport RemoveItemBtn from \"../../components/removeItemBtn/RemoveItemBtn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {deleteTaskTC, updateTaskStatusTC, updateTaskTitleTC} from \"./tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/TodolistsApi\";\r\n\r\ntype TaskPropsType = {\r\n\ttodolistId:string\r\n\ttaskId:string\r\n}\r\n\r\nconst Task:React.FC<TaskPropsType> = React.memo(({ todolistId, taskId }) => {\r\n\r\n\tconst task = useSelector<AppRootStateType,TaskType>(state => state.tasks[todolistId].filter(t => t.id === taskId)[0])\r\n\tconst dispatch = useDispatch()\r\n\r\n\r\n\tconst changeStatus = useCallback((status: TaskStatuses) => {\r\n\t\t// dispatch(ChangeTaskStatus(todolistId, status, taskId))\r\n\t\tdispatch(updateTaskStatusTC(todolistId, taskId, status))\r\n\r\n\t}, [dispatch, taskId, todolistId])\r\n\r\n\tconst changeTask = useCallback((title:string) => {\r\n\t\t// dispatch(ChangeTaskTitle(todolistId, title, taskId))\r\n\t\tdispatch(updateTaskTitleTC(todolistId, taskId, title))\r\n\t}, [dispatch, taskId, todolistId])\r\n\r\n\tconst removeTask = useCallback(() => {\r\n\t\t// dispatch(RemoveTask(todolistId, taskId))\r\n\t\tdispatch(deleteTaskTC(todolistId, taskId))\r\n\t}, [dispatch, taskId, todolistId])\r\n\r\n\treturn (\r\n\t\t<li key={taskId} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n\t\t\t<UniversalCheckbox changeBox={(e) => changeStatus(e)} checked={task.status}/>\r\n\t\t\t<EditableSpan  titleFromProps = {task.title} changeTask={(title)=> changeTask(title)}/>\r\n\t\t\t<RemoveItemBtn name={'x'} callBack={() =>removeTask()}/>\r\n\t\t</li>\r\n\t)\r\n});\r\n\r\nexport default Task;\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemBtn} from \"../../components/addItemBtn/AddItemBtn\";\r\nimport EditableSpan from \"../../components/editableSpan/EditableSpan\";\r\nimport RemoveItemBtn from \"../../components/removeItemBtn/RemoveItemBtn\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Task from \"../Tasks/Task\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {changeTodolistFilter, deleteTodolistTC, TodolistDomainType, updateTodolistTitleTC} from \"./todolistsReducer\";\r\nimport {createTaskTC, fetchTasksTC} from \"../Tasks/tasksReducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/TodolistsApi\";\r\n\r\ntype TodolistPropsType = {\r\n\tid:string\r\n}\r\n\r\nexport const Todolist:React.FC<TodolistPropsType> = React.memo(({id}) => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tlet todolist = useSelector<AppRootStateType,TodolistDomainType>(state => state.todolists.filter(tl => tl.id === id)[0])\r\n\tlet tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[id])\r\n\r\n\tuseEffect(()=> {\r\n\t\tdispatch(fetchTasksTC(todolist.id))\r\n\t}, [dispatch, todolist.id])\r\n\r\n    const onAllClickHandler = useCallback(() => dispatch((changeTodolistFilter(todolist.id, \"all\"))),\r\n\t\t[dispatch, todolist.id]);\r\n    const onActiveClickHandler = useCallback(() => dispatch((changeTodolistFilter(todolist.id, \"active\"))),\r\n\t\t[dispatch, todolist.id]);\r\n    const onCompletedClickHandler = useCallback(() => dispatch((changeTodolistFilter(todolist.id, \"completed\"))),\r\n\t\t[dispatch, todolist.id]);\r\n\r\n\r\n\tif (todolist.filter === \"active\") {\r\n\t\ttasks = tasks.filter(t => t.status === TaskStatuses.New);\r\n\t}\r\n\tif (todolist.filter === \"completed\") {\r\n\t\ttasks = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n\t}\r\n\r\n\tconst removeTodolistCallBack = useCallback(() => {\r\n\t\t// dispatch(RemoveTodolist(todolist.id))\r\n\t\tdispatch(deleteTodolistTC(todolist.id))\r\n\t},[dispatch, todolist.id])\r\n\r\n\tconst callBackHandler = useCallback((title:string) => {\r\n\t\t// dispatch(AddTask(todolist.id, title))\r\n\t\tdispatch(createTaskTC(todolist.id, title))\r\n\t},[dispatch, todolist.id])\r\n\r\n\tconst callBackHandlerForUpdateTitle = useCallback((title:string) => {\r\n\t\t// dispatch(ChangeTitle(todolist.id, title))\r\n\t\tdispatch(updateTodolistTitleTC(todolist.id, title))\r\n\t},[dispatch, todolist.id])\r\n\r\n    return <div>\r\n        <h3>\r\n\t\t\t<EditableSpan titleFromProps = {todolist.title} changeTask={callBackHandlerForUpdateTitle}/>\r\n\t\t\t<RemoveItemBtn name={'x'} callBack={removeTodolistCallBack} entityStatus = {todolist.entityStatus}/>\r\n\t\t</h3>\r\n\t\t<AddItemBtn callBackAddTask={callBackHandler} entityStatus = {todolist.entityStatus}/>\r\n        <ul>\r\n            {\r\n\t\t\t\ttasks.map(t => {\r\n\t\t\t\t\treturn <Task key={t.id} taskId={t.id} todolistId={todolist.id}  />\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n\t\t\t<Button variant={todolist.filter === 'all' ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor=\"success\" onClick={onAllClickHandler} >All</Button>\r\n\t\t\t<Button variant={todolist.filter === 'active' ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor=\"primary\" onClick={onActiveClickHandler}>Active</Button>\r\n\t\t\t<Button variant={todolist.filter === 'completed' ? \"contained\" : \"outlined\"}\r\n\t\t\t\t\tcolor=\"secondary\" onClick={onCompletedClickHandler}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemBtn} from \"../../components/addItemBtn/AddItemBtn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppSelector} from \"../../app/store\";\r\nimport {createTodolistTC, setTodolistsTC, TodolistDomainType} from \"./todolistsReducer\";\r\nimport {TaskType} from \"../../api/TodolistsApi\";\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport type TasksStateType = {\r\n\t[key: string ]:TaskType[]\r\n}\r\n\r\nexport const TodolistsList =  () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst todolists = useSelector<AppRootStateType,TodolistDomainType[]>(state => state.todolists)\r\n\tconst isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n\tuseEffect(() => {\r\n\t\tisLoggedIn && dispatch(setTodolistsTC())\r\n\t}, [dispatch, isLoggedIn])\r\n\r\n\r\n\tconst addTodolist = useCallback((title:string) => {\r\n\t\tdispatch(createTodolistTC(title))\r\n\t}, [dispatch])\r\n\r\n\tif (!isLoggedIn) {\r\n\t\treturn <Navigate to=\"/login\"/>\r\n\t}\r\n\r\n    return<>\r\n\t\t<Grid container  style={{padding: \"20px\"}}>\r\n\t\t\t<AddItemBtn callBackAddTask={addTodolist} />\r\n\t\t</Grid>\r\n\t\t<Grid container spacing={3}>\r\n\t\t\t{todolists.map(tl => {\r\n\t\t\t\treturn <Grid key={tl.id} item>\r\n\t\t\t\t\t<Paper elevation={4} style={{padding: \"10px\"}}>\r\n\t\t\t\t\t\t<Todolist key={tl.id} id={tl.id}/>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t})}\r\n\t\t</Grid>\r\n\t</>\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n\tpassword?: string\r\n\trememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\tconst isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: (values) => {\r\n\t\t\tconst errors: FormikErrorType = {}\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'Required'\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address'\r\n\t\t\t}\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'Required'\r\n\t\t\t} else if (values.password.length < 4) {\r\n\t\t\t\terrors.password = 'Invalid password length'\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC(values))\r\n\t\t\tformik.resetForm()\r\n\t\t},\r\n\t})\r\n\r\n\tif (isLoggedIn) {\r\n\t\treturn <Navigate to=\"/To-Do-List\"/>\r\n\t}\r\n\r\n\treturn <Grid container justifyContent={'center'}>\r\n\t\t<Grid item justifyContent={'center'}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormLabel>\r\n\t\t\t\t\t\t<p>To log in get registered\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t\t<a href={'https://social-network.samuraijs.com/'} target={'_blank'}  rel=\"noopener noreferrer\">here</a>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t<p>or use common test account credentials:</p>\r\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\r\n\t\t\t\t\t\t<p>Password: free</p>\r\n\t\t\t\t\t</FormLabel>\r\n\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox checked={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}/>}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>\r\n\t\t\t\t\t\t\tLogin\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\t\t</Grid>\r\n\t</Grid>\r\n}","import React from 'react'\r\nimport Snackbar from '@mui/material/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert'\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppError} from \"../../app/appReducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n\tprops, ref) {\r\n\treturn <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />\r\n})\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n\tconst error = useAppSelector(state => state.app.error)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(setAppError(null))\r\n\t}\r\n\treturn (\r\n\t\t<Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n\t\t\t<Alert onClose={handleClose} severity='error' sx={{width: '100%'}}>\r\n\t\t\t\t{error}\r\n\t\t\t</Alert>\r\n\t\t</Snackbar>\r\n\t)\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport ButtonAppBar from \"../components/buttonAppBar/ButtonAppBar\";\r\nimport Container from \"@mui/material/Container\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {TodolistsList} from \"../features/Todolists/TodolistsList\";\r\nimport {useAppSelector} from \"./store\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {initializeApp} from \"../features/Login/authReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\nconst App = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializeApp())\r\n\t}, [dispatch])\r\n\r\n\tconst status = useAppSelector(state => state.app.status)\r\n\tconst isInitialized = useAppSelector(state => state.auth.isInitialized)\r\n\r\n\tif (!isInitialized) {\r\n\t\treturn <div\r\n\t\t\tstyle={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n\t\t\t<CircularProgress/>\r\n\t\t</div>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<ErrorSnackbar/>\r\n\t\t\t<ButtonAppBar/>\r\n\t\t\t{status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n\t\t\t<Container fixed >\r\n\t\t\t\t<Routes>\r\n\t\t\t\t\t<Route path=\"/To-Do-List\" element={<TodolistsList/>}/>\r\n\t\t\t\t\t<Route path=\"/login\" element={<Login/>}/>\r\n\t\t\t\t\t<Route path=\"/404\" element={<h1 style={{textAlign: 'center'}}>404 page not found</h1>}/>\r\n\t\t\t\t\t<Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n\t\t\t\t{/*<TodolistsList/>\r\n\t\t\t\t<Login/>*/}\r\n\t\t\t\t</Routes>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store'\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\t<HashRouter>\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t</HashRouter>\r\n\t,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}